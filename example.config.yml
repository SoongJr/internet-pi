---
# Location where configuration files will be stored.
config_dir: '~'

# By default, docker containers get set up once and not updated automatically by new ansible runs.
# To pull new images and update the containers, set this to "true".
# This makes ansible run 90 seconds slower even if there are no updates at all.
# You also might not want to randomly update containers while rolling out a change to your config
# and instead deliberately update containers without any other change.
# So this should normally be set to false and only changed for a single run when you're ready to update.
docker_update_containers: false

# IPv6 configuration: You can specify your desired subnet for docker-compose here.
# If you change these settings, you must tear down any existing containers first so the network is created from scratch
docker_ipv6_enable: false
docker_ipv6_subnet: 2001:3984:3989::/64
docker_ipv6_gateway: 2001:3984:3989::1

# Domain names configuration (related services need to be enabled).
domain_name_enable: false
domain_name: 'home.local'
domain_pihole: 'pihole'          # to access pihole via: http://pihole.home.local
domain_grafana: 'grafana'        # to access grafana via: http://grafana.home.local
domain_prometheus: 'prometheus'  # to access prometheus via: http://prometheus.home.local

# Pi-hole configuration.
pihole_enable: true
pihole_hostname: pihole
pihole_timezone: America/Chicago
pihole_password: "change-this-password"
pihole_port_http: 80
pihole_port_https: 443

# Raspberry monitoring configuration
raspberry_monitoring_enable: false
telegraf_retention_policy: '90d'
telegraf_password: 'admin'

# Internet monitoring configuration.
monitoring_enable: true
monitoring_grafana_admin_password: "admin"
monitoring_speedtest_interval: 60m
monitoring_ping_interval: 5s
monitoring_ping_hosts:  # [URL];[HUMAN_READABLE_NAME]
  - http://www.google.com/;google.com
  - https://github.com/;github.com
  - https://www.apple.com/;apple.com

# Configure mail account to allow grafana sending notifications/alerts
monitoring_grafana_email_enable: false
monitoring_grafana_email_host: smtp.gmail.com:587
monitoring_grafana_email_user: "<account>@gmail.com"
monitoring_grafana_email_password: "<password>" # use an "App Password" here if at all possible! For gmail see https://myaccount.google.com/apppasswords
monitoring_grafana_email_fromaddress: "{{ domain_grafana }}.{{ domain_name }}"
monitoring_grafana_email_fromname: "Grafana"
monitoring_grafana_email_recipients: "<account>@gmail.com;<another-email-address@web.de>"

# Shelly Plug configuration. (Also requires `monitoring_enable`)
shelly_plugs_enable: false
shelly_plugs:           # list of Shelly Plugs to connect to
  - name: my-shelly-plug   # will show up in dashboard to identify this plug
    hostname: "my-shelly-plug-host-or-ip"
    port: 9924
    scrape_interval: 1m
shelly_plugs_http_username: username
shelly_plugs_http_password: "password"

# AirGradient configuration. (Also requires `monitoring_enable`)
airgradient_enable: false
airgradient_sensors:
  # ID Should be limited to no more than 38 characters, in the set a-z.
  - id: livingroom
    ip: "192.168.0.123"
    port: 9925

# Starlink configuration. (Also requires `monitoring_enable`)
starlink_enable: false

# Temperature Probe configuration. (Also requires `monitoring_enable`)
temp_probes_enable: 
  internal: false
  external: true
temp_probes:
  - name: "temp"           # human-readable name you wish to give this probe
    id: "28-06201cd5251b"  # ID of the probe (check which folder in /sys/devices has a file named w1_slave)
    master: "w1_bus_master1" # master device this probe is assigned to
    # GPIO pin the data signal of the probe is connected to (will be set up for one-wire communication):
    # Changing or enabling this setting will require a reboot of the pi.
    pin: 4
    port: 9920             # port for prometheus to reach the exporter
# probes exposed elsewhere in the network
temp_probes_ext:
  - hostname: "pi-pico"    # where to reach the client (the client defines what the humand-readable name shall be)
    port: 80               # port for prometheus to reach the client

# heat_enclosure: a python script checking some sensor value and activating a heater cable via a shelly plug if temp is below target.
# Created to slowly bring invertebrates to hibernation temperature over the span of two weeks before moving them to the fridge.
# THIS IS NOT SAFE ENOUGH TO RUN UNSUPERVISED! The script currently freezes occasionally, so be sure to check in daily, maybe set up an alarm in grafana to notify you if temperature fall dangerously low.
heat_enclosure:
  enabled: false
  start_date: "1970-12-24"  # script will try to keep start_temp before this date (00:00)
  start_temp: 20
  target_date: "2026-08-12" # script will linearly decrease temperature until it reaches the target_temp on this date, again at 00:00
  target_temp: 5
  temperature_GET: "http://<host>/[...]" # GET request URL that will return the actual temperature in the enclosure (I'm using a pi pico W with a barebones webserver)
  reboot_plug: "my-other-shelly-plug"    # shelly-plug the temperature sensor is connected to. In case it does not respond, the script will try to reboot it with this.
  heater_plug: "my-shelly-plug"          # shelly-plug the heater is connected to. Obviously this is not going to be the same plug as above.
