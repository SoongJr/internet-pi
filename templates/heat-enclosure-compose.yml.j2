version: "3"
services:
  heat-enclosure:
    build:
      context: {{ config_dir }}/heat-enclosure
      dockerfile: heat-enclosure.dockerfile
    restart: unless-stopped
    volumes:
      - .:/usr/src/app
      - /etc/localtime:/etc/localtime:ro # this synchronizes the hosts's timezone to the container
    network_mode: "host"
    logging:
      options:
        max-size: "10m"
        max-file: "3"
    environment:
      TODO: "define TUNINGS together with sensor and plug (system-specific)"
      TEMPERATURE_GET: "{{ heat_enclosure.temperature_GET }}"
      TEMPERATURE_REBOOT: "http://{{ shelly_plugs_http_username }}:{{ shelly_plugs_http_password }}@{{ heat_enclosure.reboot_plug }}/relay/0?turn=off&timer=5"
      HEATER_POST: "http://{{ shelly_plugs_http_username }}:{{ shelly_plugs_http_password }}@{{ heat_enclosure.heater_plug }}/relay/0?turn=on&timer={timer}"
      START_DATE: "{{ heat_enclosure.start_date }}"
      START_TEMP: {{ heat_enclosure.start_temp }}
      TARGET_DATE: "{{ heat_enclosure.target_date }}"
      TARGET_TEMP: {{ heat_enclosure.target_temp }}


#  # this service continuously watches the heat-enclosure container and reboots it if it looks like it's frozen:
#  # TODO: how to detect that it's "frozen"? What kind of freeze are we running into here? The attempt with etime is not working...
#  watchdog:
#    image: docker
#    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]
#    command: ["/bin/sh", "-c", "echo \"watchdog started...\"; etime=0; while true; do sleep 60s; new_etime=$$(docker exec heat-enclosure_heat-enclosure_1 sh -c 'ps -T -o etime | head -2 | tail -1'); if [[ $$etime == $$new_etime ]]; then date; echo 'docker restart heat-enclosure_heat-enclosure_1'; else etime=$$new_etime; fi; done"]
#    restart: unless-stopped
