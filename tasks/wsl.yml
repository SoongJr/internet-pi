---
- name: Ensure features required for WSL are enabled
  # required before we can call wsl.exe! Even wsl --list only prints the help page if feature is disabled.
  ansible.windows.win_optional_feature:
    name:
      - Microsoft-Windows-Subsystem-Linux
      - VirtualMachinePlatform
      - Microsoft-Hyper-V-All
    state: present
  register: optional_features

- name: Reboot if features had to be activated
  ansible.windows.win_reboot:
  when: optional_features.reboot_required

- name: Check if desired distribution is already installed
  # also gives us the current (default) user so we can determine if we need to set up a user
  ansible.windows.win_powershell:
    script: |
      # Ansible defaults/initialisation:
      $Ansible.Changed = $false
      $Ansible.Result['exists'] = $false
      $env:WSL_UTF8 = 1 # force WSL to use a sane encoding for output
      # ask WSL for name of default user of desired distro:
      $WslOutput = wsl.exe --distribution "{{ wsl_distribution }}" -- whoami
      if ($?) {
        $Ansible.Result['exists'] = $true
        $Ansible.Result['default_user'] = $WslOutput
      }
  register: existing_dist

- name: WSL already set up, print current default user
  ansible.builtin.debug:
    msg: "{{ existing_dist.default_user }}"
  when: existing_dist.result.exists

- name: Install desired distribution
  ansible.windows.win_powershell:
    script: |
      if ($Ansible.CheckMode) {
        Write-Host "Nothing to do in check-mode"
        exit 0
      }
      # force WSL to use a sane encoding for output
      $env:WSL_UTF8 = 1
      wsl.exe --set-default-version 2 # ensure we are using WSL2
      if (! $?) {
        Write-Error -ErrorAction Stop "Failed setting version to WSL2"
      }
      wsl.exe --install --distribution "{{ wsl_distribution }}"
      if (! $?) {
        Write-Error -ErrorAction Stop "Failed installing {{ wsl_distribution }}"
      }
      if ("{{ wsl_distribution_makedefault }}" -eq "True") {
        wsl.exe --set-default "{{ wsl_distribution }}"
        if (! $?) {
          Write-Error -ErrorAction Stop "Failed setting {{ wsl_distribution }} as default"
        }
      }
    # # after install, this asks for input to set up a user, so provide that as stdin
    # stdin: |
    #   {{ wsl_user }}
    #   {{ wsl_password }}
  when: not existing_dist.result.exists
  # Note: This places the whole image - which can get VERY large - into user folder.

  # TODO: basic setup for the image (username/password, SSH forwarding so it can be provisioned with ansible)
  # following best practices: https://learn.microsoft.com/en-us/windows/wsl/setup/environment
  # possibly we could export a prepared image and upload it to github, but it's probably too big...
- name: Create non-root user
  ansible.windows.win_command:
    argv:
      - set "WSL_UTF8=1" & wsl.exe
      - --distribution "{{ wsl_distribution }}"
      - --
      - useradd
      - --create-home
      - --shell /usr/bin/bash
      - --user-group
      - --groups sudo
      - --password "{{ wsl_password }}"
      - "{{ wsl_user }}"
  # only do if not already installed or user not already the default (not checking full list of existing users...)
  when: (not existing_dist.result.exists) or (existing_dist.result.default_user != wsl_user)
