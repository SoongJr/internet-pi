---
# Location where configuration files will be stored.
config_dir: '~/internet-pi'

# By default, docker containers get set up once and not updated automatically by new ansible runs.
# To pull new images and update the containers, set this to "true".
# This makes ansible run 90 seconds slower even if there are no updates at all.
# You also might not want to randomly update containers while rolling out a change to your config
# and instead deliberately update containers without any other change.
# So this should normally be set to false and only changed for a single run when you're ready to update.
docker_update_containers: false

# IPv6 configuration: You can specify your desired subnet for docker-compose here.
docker_ipv6_enable: true   # if you change this variable, you must tear down containers first so the network is created from scratch
docker_ipv6_subnet: 2001:3984:3989::/64
docker_ipv6_gateway: 2001:3984:3989::1

# Domain names configuration (related services need to be enabled).
domain_name_enable: false

# Pi-hole configuration.
pihole_enable: false
pihole_hostname: pihole
pihole_timezone: Europe/Berlin
pihole_port_http: 8080
pihole_port_https: 44443

# Raspberry monitoring configuration
raspberry_monitoring_enable: true
telegraf_retention_policy: '90d'
telegraf_password: 'admin'

# Internet monitoring configuration.
monitoring_enable: true
monitoring_speedtest_interval: 60m
monitoring_ping_interval: 5s
monitoring_ping_hosts:  # [URL];[HUMAN_READABLE_NAME]
  - https://www.google.com/;google.com
  - https://github.com/;github.com
  - https://soongjr.mooo.com/;soongjr.mooo.com

# Configure mail account to allow grafana sending notifications/alerts
monitoring_grafana_email_enable: true
monitoring_grafana_email_host: smtp.gmail.com:587
monitoring_grafana_email_fromaddress: ""
monitoring_grafana_email_fromname: "Grafana"
monitoring_grafana_email_recipients: "SoongJr@googlemail.com" # semicolon-separated list

# Shelly Plug configuration. (Also requires `monitoring_enable`)
shelly_plugs_enable: true
shelly_plugs:           # list of Shelly Plugs to connect to
  - name: Fridge
    hostname: "shellyplug-fridge"
    port: 9924
    scrape_interval: 1m
  - name: Printer
    hostname: "shellyplug-printer"
    port: 9925
    scrape_interval: 30s
  - name: generic-0
    hostname: "shellyplug-generic-0"
    port: 9926
    scrape_interval: 1s
  - name: Bedroom-Tech
    hostname: "shellyplug-generic-1"
    port: 9927
    scrape_interval: 1m

# AirGradient configuration. (Also requires `monitoring_enable`)
airgradient_enable: false

# Starlink configuration. (Also requires `monitoring_enable`)
starlink_enable: false

# Temperature Probe configuration. (Also requires `monitoring_enable`)
temp_probes_enable: 
  internal: false
  external: true
# probes exposed elsewhere in the network
temp_probes_ext:
  - hostname: "pico-temp-0"  # where to reach the client (the client defines what the humand-readable name shall be)
    port: 80                 # port for prometheus to reach the client
  - hostname: "pico-temp-1"  # not all of these may be reachable, but they'll be visible as soon as they go online.
    port: 80
  - hostname: "pico-temp-2"
    port: 80

# heat_enclosure: a python script checking some sensor value and activating a heater cable via a shelly plug if temp is below target.
# Created to slowly bring invertebrates to hibernation temperature over the span of two weeks before moving them to the fridge.
# THIS IS NOT SAFE ENOUGH TO RUN UNSUPERVISED! The script currently freezes occasionally, so be sure to check in daily, maybe set up an alarm in grafana to notify you if temperature fall dangerously low.
heat_enclosure:
  enabled: false
  start_date: "2022-11-13"  # script will try to keep start_temp before this date (00:00)
  start_temp: 20
  target_date: "2022-11-23" # script will linearly decrease temperature until it reaches the target_temp on this date, again at 00:00
  target_temp: 5
  temperature_GET: "http://pico-temp-2/dht?room=ants" # GET request URL that will return the actual temperature in the enclosure (I'm using a pi pico W with a barebones webserver)
  #TODO: this needs to get refactored, we need to know the room separately to configure alerts in alerting.yaml
  reboot_plug: "shellyplug-printer"                   # shelly-plug the temperature sensor is connected to. In case it does not respond, the script will try to reboot it with this.
  heater_plug: "shellyplug-generic-0"                 # shelly-plug the heater is connected to. Obviously this is not going to be the same plug as above.
